#!/usr/bin/python
# coding: utf-8

"""
Script to calculate the isovalue to use in VMD to capture 95% or 99% of the
atoms. Needs a dx file generated by cpptraj.
"""

# Copyright (C) 2016  Jean-Patrick Francoia, Jean-Christophe Rossi,
# Gerald Monard, and Laurent Vial

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


import numpy as np


# Open the dx file
with open("volmap_wi_rmsd.dx", "r") as f:
    data = f.readlines()


def calculate_total(iso_value):

    """Calculate how many atoms are captured for a given isovalue"""

    x, y, z = [], [], []

    for line in data[8:-4]:

        a, b, c = line.split()
        a, b, c = float(a), float(b), float(c)

        if a > iso_value:
            x.append(a)
        if b > iso_value:
            y.append(b)
        if c > iso_value:
            z.append(c)

    x = np.array(x)
    y = np.array(y)
    z = np.array(z)

    return np.sum(x) + np.sum(y) + np.sum(z)


def dicho(a, b, total, delta):

    """Dichotomy function. Takes a and b as min and max value for the expected
    isovalue. total is the nbr of atoms at 95 or 99%"""

    print("a = {}; b = {}".format(a, b))

    while b - a > delta:

        c = (a + b) / 2

        if total <= calculate_total(c):
            a = c
        else:
            b = c

        print("isovalue = {}; atoms = {}".format(c, calculate_total(c)))


    return c


# # G1
# TOTAL = 169.1
# TOTAL = 176.22

# # G2
# TOTAL = 999.4
TOTAL = 1041.48

# # G3
# TOTAL = 2544.1
# TOTAL = 2651.22

# # G4
# TOTAL = 7750.6
# TOTAL = 7868.52


# Find the isovalue. Must be between 0.0001 and 0.003. Capture TOTAL atoms,
# with a tolerance of 10e-6 for the isovalue/
isovalue = dicho(0.0001, 0.003, TOTAL, 10e-6)

# Print the result
print("{} compared to {}".format(calculate_total(isovalue), TOTAL))


# Save the isovalue in a file
with open("isovalue.txt", "w") as f:
    f.write(str(isovalue))


if __name__ == '__main__':
    pass
